name: Auto-Test Dependabot PRs
on:
  schedule:
    - cron: "*/10 * * * *"

jobs:
  auto-test:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: "${{ secrets.LITTLE_BUDDY_APP_ID }}"
          private_key: "${{ secrets.LITTLE_BUDDY_PRIVATE_KEY }}"

      - name: Dispatch
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const DEPENDABOT_NAME = "dependabot[bot]";
            const pullRequests = await github.rest.pulls.list({ 
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              sort: "created",
              direction: "asc",
            });

            let dependabotPR = undefined;
            for (const pr of pullRequests.data){
              if(pr.user.login === DEPENDABOT_NAME){
                const commits = await github.rest.pulls.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                });

                if(commits.data.some(x => x.author.login !== DEPENDABOT_NAME)){
                  core.info(`Non-${DEPENDABOT_NAME} commits found in PR ${pr.url}. Skipping.`);
                  continue;
                }

                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  per_page: 100,
                });

                if(comments.data.some(x=>x.body === `run tests sha={pr.head.sha}`)){
                  core.info(`${pr.url} already has the test comment for sha=${pr.head.sha} issued. Skipping.`);
                  continue;
                }

                dependabotPR = pr;
                core.info(`Found PR: ${dependabotPR.url}`);
                break;
              }
            }

            if(dependabotPR === undefined){
              core.info("No dependabot PRs found. Stopping.");
              return;
            }

            // Truncate the body to keep the size of the payload under the max
            if (dependabotPR.body) {
              dependabotPR.body = dependabotPR.body.slice(0, 1000)
            }

            let clientPayload = {};
            clientPayload['pull_request'] = dependabotPR

            core.info("Dispatching ok-to-test-command.");
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: "ok-to-test-command",
              client_payload: clientPayload,
            });

            const commentBody = `run tests sha=${dependabotPR.head.sha}`;
            core.info(`Issuing comment: "${commentBody}"`);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: dependabotPR.number,
              body: commentBody,
            });
